* Docker Envs

Docker Envs is an extension to the docker concept by having
declarative environments that are associated with docker images. In
addition this tool does not require docker to build images. Thus
allowing for interesting caching behavior and tricks that docker would
not normally allow.

Features:
 - =docker= is not needed to build images
 - declarative environments that map 1:1 to docker images
 - significantly faster build times since builds can take advantage of package cache
 - interesting opportunities for layering (e.g. mkl gets separate layer)
 - no dependencies allowing for library packaged as [[https://docs.python.org/3/library/zipapp.html][zipapp]]

** References

 - [[https://docs.docker.com/registry/spec/api/][Docker Registry API Specification]]
 - Docker Image Specification
   - [[https://github.com/moby/moby/blob/master/image/spec/v1.2.md][Summary]]
   - [[https://docs.docker.com/registry/spec/manifest-v2-2/][Registry V2 Specification]]

** Examples using Library

Downloading docker images without docker!

#+begin_src python
  from docker_envs.registry.client import pull_image

  image = pull_image('continuumio/miniconda3', 'latest')
#+end_src

Modify docker image from filesystem

#+begin_src python :results output
  from docker_envs.docker.base import Image
  from docker_envs.registry.client import pull_image
  from docker_envs.conda import conda_file_filter

  image = pull_image('continuumio/miniconda3', 'latest')
  image.remove_layer()
  image.name = 'this-is-a-test'
  image.add_layer_path('./', filter=conda_file_filter())
  image.add_layer_contents({
      'this/is/a/test1': b'this is test 1',
      'this/is/a/test2': b'this is test 2'
  })
  image.write_file('example-filter.tar')
#+end_src

Build conda docker image from library

#+begin_src python
  from docker_envs.conda import build_docker_environment

  build_docker_environment(
      base_image='continuumio/miniconda3:latest',
      output_image='example-image:123456',
      packages=[
          'numpy',
          'numba',
          'flask',
      ],
      output_filename='demo.tar')
#+end_src

Build conda docker image from command line

#+begin_src shell
  # docker_envs.pyz # if you have it packaged as zipapp
  python -m docker_envs build -b continuumio/miniconda3:latest \
                              -i example-image:123456 \
                              -p numpy -p numba -p flask \
                              -o demo.tar
#+end_src

** How does this work?

Turns out that docker images are just a tar collection of files. There
are several versions of the spec. For =v1.0= the specification is
[[[https://github.com/moby/moby/blob/master/image/spec/v1.md][defined here]]. Instead of writing down the spec lets look into a single
docker image.

#+begin_src shell :results none
  docker pull ubuntu:latest
  docker save ubuntu:latest -o /tmp/ubuntu.tar
#+end_src

List the directory structure of the docker image. Notice how it is a
collection of =layer.tar= which is a tar archive of filesystems. And
several json files. =VERSION= file is always =1.0= currently.

#+begin_src shell :results output
  tar -tvf /tmp/ubuntu.tar
#+end_src

#+RESULTS:
#+begin_example
drwxr-xr-x 0/0               0 2020-04-23 21:07 0ab81159ffd825140a985a9bbc4985a39dfde9d023c70c6a6f2ec648cd29a2f8/
-rw-r--r-- 0/0               3 2020-04-23 21:07 0ab81159ffd825140a985a9bbc4985a39dfde9d023c70c6a6f2ec648cd29a2f8/VERSION
-rw-r--r-- 0/0            1261 2020-04-23 21:07 0ab81159ffd825140a985a9bbc4985a39dfde9d023c70c6a6f2ec648cd29a2f8/json
-rw-r--r-- 0/0            3072 2020-04-23 21:07 0ab81159ffd825140a985a9bbc4985a39dfde9d023c70c6a6f2ec648cd29a2f8/layer.tar
-rw-r--r-- 0/0            3408 2020-04-23 21:07 1d622ef86b138c7e96d4f797bf5e4baca3249f030c575b9337638594f2b63f01.json
drwxr-xr-x 0/0               0 2020-04-23 21:07 2d7edbbc5f9ab725e2324534aef69583c409f0163f993b465d69e1783c212909/
-rw-r--r-- 0/0               3 2020-04-23 21:07 2d7edbbc5f9ab725e2324534aef69583c409f0163f993b465d69e1783c212909/VERSION
-rw-r--r-- 0/0             482 2020-04-23 21:07 2d7edbbc5f9ab725e2324534aef69583c409f0163f993b465d69e1783c212909/json
-rw-r--r-- 0/0           15360 2020-04-23 21:07 2d7edbbc5f9ab725e2324534aef69583c409f0163f993b465d69e1783c212909/layer.tar
drwxr-xr-x 0/0               0 2020-04-23 21:07 8827d9386a10ef5c4b5cb3b7da10c4422b9fd301285e72c93b1204d5a7637cb2/
-rw-r--r-- 0/0               3 2020-04-23 21:07 8827d9386a10ef5c4b5cb3b7da10c4422b9fd301285e72c93b1204d5a7637cb2/VERSION
-rw-r--r-- 0/0             482 2020-04-23 21:07 8827d9386a10ef5c4b5cb3b7da10c4422b9fd301285e72c93b1204d5a7637cb2/json
-rw-r--r-- 0/0         1011200 2020-04-23 21:07 8827d9386a10ef5c4b5cb3b7da10c4422b9fd301285e72c93b1204d5a7637cb2/layer.tar
drwxr-xr-x 0/0               0 2020-04-23 21:07 93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c/
-rw-r--r-- 0/0               3 2020-04-23 21:07 93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c/VERSION
-rw-r--r-- 0/0             406 2020-04-23 21:07 93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c/json
-rw-r--r-- 0/0        75215872 2020-04-23 21:07 93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c/layer.tar
-rw-r--r-- 0/0             433 1969-12-31 19:00 manifest.json
-rw-r--r-- 0/0              89 1969-12-31 19:00 repositories
#+end_example

Dockerhub happens to export docker images in a =v1= - =v1.2=
compatible format. Lets only look at the files important for
=v1=. Repositories tells the layer to use as the layer head of the
current name/tag.

#+begin_src shell :dir /tmp :var filename="repositories" :results output
  tar -xf /tmp/ubuntu.tar $filename
  cat $filename | python -m json.tool
#+end_src

#+RESULTS:
: {
:     "ubuntu": {
:         "latest": "0ab81159ffd825140a985a9bbc4985a39dfde9d023c70c6a6f2ec648cd29a2f8"
:     }
: }

For each layer there are three files: =VERSION=, =layer.tar=, and
=json=.

#+begin_src shell :dir /tmp :var filename="93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c/VERSION" :results output
  tar -xf /tmp/ubuntu.tar $filename
  cat $filename
#+end_src

#+RESULTS:
: 1.0

#+begin_src shell :dir /tmp :var filename="93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c/json" :results output
  tar -xf /tmp/ubuntu.tar $filename
  cat $filename | python -m json.tool
#+end_src

Looking at layer metadata.

#+RESULTS:
#+begin_example
{
    "id": "93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c",
    "created": "1969-12-31T19:00:00-05:00",
    "container_config": {
        "Hostname": "",
        "Domainname": "",
        "User": "",
        "AttachStdin": false,
        "AttachStdout": false,
        "AttachStderr": false,
        "Tty": false,
        "OpenStdin": false,
        "StdinOnce": false,
        "Env": null,
        "Cmd": null,
        "Image": "",
        "Volumes": null,
        "WorkingDir": "",
        "Entrypoint": null,
        "OnBuild": null,
        "Labels": null
    },
    "os": "linux"
}
#+end_example

Looking at the layer filesystem.

#+begin_src shell :dir /tmp :var filename="93935bf1450219e4351893e546b97b4584083b01d19daeba56cab906fc75fc1c/layer.tar" :results output
  tar -xf /tmp/ubuntu.tar $filename
  tar -tvf $filename | head
#+end_src

#+RESULTS:
#+begin_example
lrwxrwxrwx 0/0               0 2020-04-23 07:06 bin -> usr/bin
drwxr-xr-x 0/0               0 2020-04-15 07:09 boot/
drwxr-xr-x 0/0               0 2020-04-23 07:09 dev/
drwxr-xr-x 0/0               0 2020-04-23 07:09 etc/
-rw------- 0/0               0 2020-04-23 07:06 etc/.pwd.lock
-rw-r--r-- 0/0            3028 2020-04-23 07:06 etc/adduser.conf
drwxr-xr-x 0/0               0 2020-04-23 07:09 etc/alternatives/
-rw-r--r-- 0/0             100 2020-03-23 02:12 etc/alternatives/README
lrwxrwxrwx 0/0               0 2020-04-23 07:09 etc/alternatives/awk -> /usr/bin/mawk
lrwxrwxrwx 0/0               0 2020-04-23 07:09 etc/alternatives/nawk -> /usr/bin/mawk
#+end_example
